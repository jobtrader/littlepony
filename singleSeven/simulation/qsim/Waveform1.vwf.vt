// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2017 19:54:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    counter_debounce
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module counter_debounce_vlg_sample_tst(
	clk,
	CLR,
	In_put,
	sampler_tx
);
input  clk;
input  CLR;
input  In_put;
output sampler_tx;

reg sample;
time current_time;
always @(clk or CLR or In_put)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module counter_debounce_vlg_check_tst (
	Carry,
	Carry2,
	output2,
	sampler_rx
);
input  Carry;
input [6:0] Carry2;
input [6:0] output2;
input sampler_rx;

reg  Carry_expected;
reg [6:0] Carry2_expected;
reg [6:0] output2_expected;

reg  Carry_prev;
reg [6:0] Carry2_prev;
reg [6:0] output2_prev;

reg  Carry_expected_prev;
reg [6:0] Carry2_expected_prev;
reg [6:0] output2_expected_prev;

reg  last_Carry_exp;
reg [6:0] last_Carry2_exp;
reg [6:0] last_output2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Carry_prev = Carry;
	Carry2_prev = Carry2;
	output2_prev = output2;
end

// update expected /o prevs

always @(trigger)
begin
	Carry_expected_prev = Carry_expected;
	Carry2_expected_prev = Carry2_expected;
	output2_expected_prev = output2_expected;
end



// expected Carry
initial
begin
	Carry_expected = 1'bX;
end 
// expected Carry2[ 6 ]
initial
begin
	Carry2_expected[6] = 1'bX;
end 
// expected Carry2[ 5 ]
initial
begin
	Carry2_expected[5] = 1'bX;
end 
// expected Carry2[ 4 ]
initial
begin
	Carry2_expected[4] = 1'bX;
end 
// expected Carry2[ 3 ]
initial
begin
	Carry2_expected[3] = 1'bX;
end 
// expected Carry2[ 2 ]
initial
begin
	Carry2_expected[2] = 1'bX;
end 
// expected Carry2[ 1 ]
initial
begin
	Carry2_expected[1] = 1'bX;
end 
// expected Carry2[ 0 ]
initial
begin
	Carry2_expected[0] = 1'bX;
end 
// expected output2[ 6 ]
initial
begin
	output2_expected[6] = 1'bX;
end 
// expected output2[ 5 ]
initial
begin
	output2_expected[5] = 1'bX;
end 
// expected output2[ 4 ]
initial
begin
	output2_expected[4] = 1'bX;
end 
// expected output2[ 3 ]
initial
begin
	output2_expected[3] = 1'bX;
end 
// expected output2[ 2 ]
initial
begin
	output2_expected[2] = 1'bX;
end 
// expected output2[ 1 ]
initial
begin
	output2_expected[1] = 1'bX;
end 
// expected output2[ 0 ]
initial
begin
	output2_expected[0] = 1'bX;
end 
// generate trigger
always @(Carry_expected or Carry or Carry2_expected or Carry2 or output2_expected or output2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Carry = %b | expected Carry2 = %b | expected output2 = %b | ",Carry_expected_prev,Carry2_expected_prev,output2_expected_prev);
	$display("| real Carry = %b | real Carry2 = %b | real output2 = %b | ",Carry_prev,Carry2_prev,output2_prev);
`endif
	if (
		( Carry_expected_prev !== 1'bx ) && ( Carry_prev !== Carry_expected_prev )
		&& ((Carry_expected_prev !== last_Carry_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry_expected_prev);
		$display ("     Real value = %b", Carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Carry_exp = Carry_expected_prev;
	end
	if (
		( Carry2_expected_prev[0] !== 1'bx ) && ( Carry2_prev[0] !== Carry2_expected_prev[0] )
		&& ((Carry2_expected_prev[0] !== last_Carry2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry2_expected_prev);
		$display ("     Real value = %b", Carry2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Carry2_exp[0] = Carry2_expected_prev[0];
	end
	if (
		( Carry2_expected_prev[1] !== 1'bx ) && ( Carry2_prev[1] !== Carry2_expected_prev[1] )
		&& ((Carry2_expected_prev[1] !== last_Carry2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry2_expected_prev);
		$display ("     Real value = %b", Carry2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Carry2_exp[1] = Carry2_expected_prev[1];
	end
	if (
		( Carry2_expected_prev[2] !== 1'bx ) && ( Carry2_prev[2] !== Carry2_expected_prev[2] )
		&& ((Carry2_expected_prev[2] !== last_Carry2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry2_expected_prev);
		$display ("     Real value = %b", Carry2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Carry2_exp[2] = Carry2_expected_prev[2];
	end
	if (
		( Carry2_expected_prev[3] !== 1'bx ) && ( Carry2_prev[3] !== Carry2_expected_prev[3] )
		&& ((Carry2_expected_prev[3] !== last_Carry2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry2_expected_prev);
		$display ("     Real value = %b", Carry2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Carry2_exp[3] = Carry2_expected_prev[3];
	end
	if (
		( Carry2_expected_prev[4] !== 1'bx ) && ( Carry2_prev[4] !== Carry2_expected_prev[4] )
		&& ((Carry2_expected_prev[4] !== last_Carry2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry2_expected_prev);
		$display ("     Real value = %b", Carry2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Carry2_exp[4] = Carry2_expected_prev[4];
	end
	if (
		( Carry2_expected_prev[5] !== 1'bx ) && ( Carry2_prev[5] !== Carry2_expected_prev[5] )
		&& ((Carry2_expected_prev[5] !== last_Carry2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry2_expected_prev);
		$display ("     Real value = %b", Carry2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Carry2_exp[5] = Carry2_expected_prev[5];
	end
	if (
		( Carry2_expected_prev[6] !== 1'bx ) && ( Carry2_prev[6] !== Carry2_expected_prev[6] )
		&& ((Carry2_expected_prev[6] !== last_Carry2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry2_expected_prev);
		$display ("     Real value = %b", Carry2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Carry2_exp[6] = Carry2_expected_prev[6];
	end
	if (
		( output2_expected_prev[0] !== 1'bx ) && ( output2_prev[0] !== output2_expected_prev[0] )
		&& ((output2_expected_prev[0] !== last_output2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output2_expected_prev);
		$display ("     Real value = %b", output2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output2_exp[0] = output2_expected_prev[0];
	end
	if (
		( output2_expected_prev[1] !== 1'bx ) && ( output2_prev[1] !== output2_expected_prev[1] )
		&& ((output2_expected_prev[1] !== last_output2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output2_expected_prev);
		$display ("     Real value = %b", output2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output2_exp[1] = output2_expected_prev[1];
	end
	if (
		( output2_expected_prev[2] !== 1'bx ) && ( output2_prev[2] !== output2_expected_prev[2] )
		&& ((output2_expected_prev[2] !== last_output2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output2_expected_prev);
		$display ("     Real value = %b", output2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output2_exp[2] = output2_expected_prev[2];
	end
	if (
		( output2_expected_prev[3] !== 1'bx ) && ( output2_prev[3] !== output2_expected_prev[3] )
		&& ((output2_expected_prev[3] !== last_output2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output2_expected_prev);
		$display ("     Real value = %b", output2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output2_exp[3] = output2_expected_prev[3];
	end
	if (
		( output2_expected_prev[4] !== 1'bx ) && ( output2_prev[4] !== output2_expected_prev[4] )
		&& ((output2_expected_prev[4] !== last_output2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output2_expected_prev);
		$display ("     Real value = %b", output2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output2_exp[4] = output2_expected_prev[4];
	end
	if (
		( output2_expected_prev[5] !== 1'bx ) && ( output2_prev[5] !== output2_expected_prev[5] )
		&& ((output2_expected_prev[5] !== last_output2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output2_expected_prev);
		$display ("     Real value = %b", output2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output2_exp[5] = output2_expected_prev[5];
	end
	if (
		( output2_expected_prev[6] !== 1'bx ) && ( output2_prev[6] !== output2_expected_prev[6] )
		&& ((output2_expected_prev[6] !== last_output2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output2_expected_prev);
		$display ("     Real value = %b", output2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output2_exp[6] = output2_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module counter_debounce_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg CLR;
reg In_put;
// wires                                               
wire Carry;
wire [6:0] Carry2;
wire [6:0] output2;

wire sampler;                             

// assign statements (if any)                          
counter_debounce i1 (
// port map - connection between master ports and signals/registers   
	.Carry(Carry),
	.Carry2(Carry2),
	.clk(clk),
	.CLR(CLR),
	.In_put(In_put),
	.output2(output2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// CLR
initial
begin
	CLR = 1'b1;
end 

// In_put
initial
begin
	In_put = 1'b0;
end 

counter_debounce_vlg_sample_tst tb_sample (
	.clk(clk),
	.CLR(CLR),
	.In_put(In_put),
	.sampler_tx(sampler)
);

counter_debounce_vlg_check_tst tb_out(
	.Carry(Carry),
	.Carry2(Carry2),
	.output2(output2),
	.sampler_rx(sampler)
);
endmodule

